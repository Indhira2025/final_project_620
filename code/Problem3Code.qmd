---
title: "Medha's Project Code"
author: "Medha Rao"
format: html
editor: visual
---

```{r Loading Libraries echo = FALSE}
library(httr2)
library(dplyr)
library(lubridate)
library(janitor)
library(tidyverse)
library(jsonlite)
library(knitr)
library(MMWRweek)
```

```{r Function to get_cdc_data}
get_cdc_data_msr <- function(endpoint) {
  api_url <- paste0("https://data.cdc.gov/resource/", endpoint, ".json")
  data <- request(api_url) |> 
    req_url_query("$limit" = 10000000) |> 
    req_perform() |> 
    resp_body_json(simplifyVector = TRUE)
  return(data)
}
```

```{r raw_msr Data}

cases_raw_msr <- get_cdc_data_msr("pwn4-m3yp")
hosp_raw_msr <- get_cdc_data_msr("39z2-9zu6")
deaths_raw_msr <- get_cdc_data_msr("r8kw-7aab")
vax_raw_msr <- get_cdc_data_msr("rh2h-3yt2")

```

```{r cleaning Data}

deaths_clean_msr <- deaths_raw_msr %>%
  mutate(
    start_date = as_date(start_date),
    mmwr_year = epiyear(start_date),
    mmwr_week = epiweek(start_date),
    covid_19_deaths = as.numeric(covid_19_deaths)
  ) %>%
  mutate(state = dplyr::recode(state, !!!setNames(state.abb, state.name))) %>%
  dplyr::select(start_date, state, mmwr_year, mmwr_week, covid_19_deaths)

cases_clean_msr <- cases_raw_msr %>%
  mutate(
    start_date = as_date(start_date),
    mmwr_year = epiyear(start_date),
    mmwr_week = epiweek(start_date)
  ) %>%
  dplyr::select(state, mmwr_year, mmwr_week, new_cases)

hosp_clean_msr = hosp_raw_msr |> 
  dplyr::select(jurisdiction, collection_date, hosp = new_covid_19_hospital) |>
  mutate(
    collection_date = as_date(collection_date),
    mmwr_week = epiweek(collection_date), 
    mmwr_year = epiyear(collection_date)
  ) |>
  mutate(hosp = as.integer(hosp)) |>
  rename(state = jurisdiction) |>
  group_by(state, mmwr_week, mmwr_year) |>
  summarise(total_hosp = sum(hosp, na.rm = TRUE))

vax_clean_msr <- vax_raw_msr %>%
  filter(date_type == "Admin") %>%
  mutate(
    date = as_date(date),
    mmwr_year = epiyear(date),
    mmwr_week = epiweek(date),
    series_complete = as.numeric(series_complete_cumulative),
    booster = as.numeric(booster_cumulative)
  ) %>%
  group_by(date, location, mmwr_year, mmwr_week) %>%
  summarise(
    series_complete = max(series_complete, na.rm = TRUE),
    booster = max(booster, na.rm = TRUE)
  ) %>%
  rename(state = location) %>%
  dplyr::select(date, state, mmwr_year, mmwr_week, series_complete, booster)

```

```{r Population Data}

census_key <- "a498a5717131540bcea2c82b3e8fd47a367cef98"
url <- "https://api.census.gov/data/2021/pep/population"
request <- request(paste0(url, 
                         paste0("?get=POP_2020,POP_2021,NAME&for=state:*&key=",
                                census_key)))
response <- request |> req_perform()
population <- response |> resp_body_string() |> jsonlite::fromJSON()

population_msr <- population %>%
  row_to_names(row_number = 1) %>%
  as_tibble()

clean_msr_population <- population_msr %>%
  dplyr::select(-state) %>%
  rename(state_name = NAME) %>%
  pivot_longer(cols = starts_with("POP_"),  
               names_to = "Year",
               values_to = "Population") %>%
  mutate(
    Year = gsub("POP_", "", Year),  
    Year = as.integer(Year), 
    Population = as.numeric(Population)
  )

state_abbreviations <- c(state.abb, "DC", "PR")
state_names <- c(state.name, "District of Columbia", "Puerto Rico")

clean_msr_population <- clean_msr_population %>%
  mutate(
    state = case_when(
      state_name %in% state_names ~ state_abbreviations[match(state_name, state_names)]
    )
  )
```

```{r Regions Data}

url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions_data_msr <- fromJSON(url)
regions_msr <- regions_data_msr %>%
  unnest(cols = states) %>%
  rename(state_name = states) %>%
  mutate(
    region_name = ifelse(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", "NYNJPV", region_name),
    region_name = factor(region_name)
  )

clean_msr_population <- clean_msr_population %>%
  left_join(regions_msr, by = "state_name")

```

```{r Dates}

all_dates <- data.frame(date = seq(make_date(2020, 1, 1), make_date(2025, 4, 14), by = "week")) %>%
  mutate(
    date = ceiling_date(date, unit = "week", week_start = 7) - days(1),
    mmwr_year = epiyear(date), 
    mmwr_week = epiweek(date)
  )
```

```{r Master Data}
master_data_msr <- tidyr::expand_grid(
  date = unique(all_dates$date),
  state = unique(clean_msr_population$state)
) %>%
  mutate(
    mmwr_year = epiyear(date),
    mmwr_week = epiweek(date)
  )

master_data_msr <- master_data_msr %>%
  left_join(
    clean_msr_population %>% dplyr::select(state, state_name, Year, Population, region_name),
    by = c("state", "mmwr_year" = "Year")
  )

master_data_msr <- master_data_msr %>%
  mutate(wave = case_when(
    date >= as_date("2020-03-01") & date <= as_date("2021-02-28") ~ "1st Wave: Original",
    date >= as_date("2021-01-01") & date <= as_date("2021-06-30") ~ "2nd Wave: Alpha",
    date >= as_date("2021-07-01") & date <= as_date("2021-11-30") ~ "3rd Wave: Delta",
    date >= as_date("2021-12-01") & date <= as_date("2022-03-31") ~ "4th Wave: Omicron BA.1",
    date >= as_date("2022-04-01") & date <= as_date("2023-06-14") ~ "5th Wave: Omicron BA.2–BA.5–XBB",
    date >= as_date("2023-06-15") & date <= as_date("2024-03-31") ~ "6th Wave: XBB",
    TRUE ~ NA_character_
  ))%>%
  filter(!is.na(wave))

master_data_msr <- master_data_msr %>%
  left_join(deaths_clean_msr %>% rename(date = start_date), 
            by = c("date", "state", "mmwr_year", "mmwr_week")) %>%
  left_join(cases_clean_msr, 
            by = c("state", "mmwr_year", "mmwr_week")) %>%
  left_join(hosp_clean_msr, 
            by = c("state", "mmwr_year", "mmwr_week")) %>%
  left_join(vax_clean_msr, 
            by = c("date", "state", "mmwr_year", "mmwr_week"))

```

```{r Data Check}
head(master_data_msr)
dim(master_data_msr)
```

```{r Fatality Rate- adding wave data to clean_msr data sets and aggregate by wave}

assign_wave_msr <- function(date) {
  case_when(
    date >= as_date("2020-03-01") & date <= as_date("2021-02-28") ~ "1st Wave: Original",
    date >= as_date("2021-01-01") & date <= as_date("2021-06-30") ~ "2nd Wave: Alpha",
    date >= as_date("2021-07-01") & date <= as_date("2021-11-30") ~ "3rd Wave: Delta",
    date >= as_date("2021-12-01") & date <= as_date("2022-03-31") ~ "4th Wave: Omicron BA.1",
    date >= as_date("2022-04-01") & date <= as_date("2023-06-14") ~ "5th Wave: Omicron BA.2–BA.5–XBB",
    date >= as_date("2023-06-15") & date <= as_date("2024-03-31") ~ "6th Wave: XBB",
    TRUE ~ NA_character_
  )
}

deaths_clean_msr <- deaths_clean_msr %>%
  mutate(wave = assign_wave_msr(start_date)) %>%
  filter(!is.na(wave))

cases_clean_msr <- cases_clean_msr %>%
  mutate(
    date = MMWRweek::MMWRweek2Date(MMWRyear = mmwr_year, MMWRweek = mmwr_week),
    wave = assign_wave_msr(date)
  ) %>%
  filter(!is.na(wave))

hosp_clean_msr <- hosp_clean_msr %>%
  mutate(date = MMWRweek::MMWRweek2Date(MMWRyear = mmwr_year, MMWRweek = mmwr_week),
         wave = assign_wave_msr(date)) %>%
  filter(!is.na(wave))

# National totals by wave
deaths_by_wave <- deaths_clean_msr %>%
  group_by(wave) %>%
  summarise(deaths = sum(covid_19_deaths, na.rm = TRUE))

cases_by_wave <- cases_clean_msr %>%
  group_by(wave) %>%
  summarise(cases = sum(as.numeric(new_cases), na.rm = TRUE))

hosp_by_wave <- hosp_clean_msr %>%
  group_by(wave) %>%
  summarise(hospitalizations = sum(total_hosp, na.rm = TRUE))

```

```{r Fatality Rate- calculating rates per 1000 cases}

# Join all together
wave_summary <- deaths_by_wave %>%
  left_join(cases_by_wave, by = "wave") %>%
  left_join(hosp_by_wave, by = "wave") %>%
  mutate(
    CFR = deaths / cases,
    deaths_per_1000_cases = deaths / cases * 1000,
    hosp_per_1000_cases = hospitalizations / cases * 1000
  )

print(wave_summary)


```

```{r Fatality Rate- Visualization}
# CFR plot
ggplot(wave_summary, aes(x = wave, y = CFR)) +
  geom_col(fill = "hotpink") +
  labs(title = "Case Fatality Rate (CFR) by COVID-19 Variant Wave",
       x = "Variant Wave", y = "CFR (Deaths / Cases)") +
  theme_classic() + 
    theme(axis.text.x = element_text(size = 6))


# Hospitalization per 1,000 cases plot
ggplot(wave_summary, aes(x = wave, y = hosp_per_1000_cases)) +
  geom_col(fill = "orange") +
  labs(title = "Hospitalizations per 1,000 Cases by Variant Wave",
       x = "Variant Wave", y = "Hospitalizations per 1,000 Cases") +
  theme_classic() + 
  theme(axis.text.x = element_text(size = 6))


```

```{r Vaccination data Fatality Rate Exploration}
# For each wave, get the max cumulative series_complete (fully vaccinated)
library(data.table)
setDT(vax_clean_msr)[, wave := fcase(
  date %between% as.IDate(c("2020-03-01", "2021-02-28")), "1st Wave: Original",
  date %between% as.IDate(c("2021-01-01", "2021-06-30")), "2nd Wave: Alpha",
  date %between% as.IDate(c("2021-07-01", "2021-11-30")), "3rd Wave: Delta",
  date %between% as.IDate(c("2021-12-01", "2022-03-31")), "4th Wave: Omicron BA.1",
  date %between% as.IDate(c("2022-04-01", "2023-06-14")), "5th Wave: Omicron BA.2–BA.5–XBB",
  date %between% as.IDate(c("2023-06-15", "2024-03-31")), "6th Wave: XBB",
  default = NA_character_
)]


vax_by_wave <- vax_clean_msr %>% 
  filter(!is.na(wave)) %>%
  group_by(wave) %>%
  summarise(fully_vax = max(series_complete, na.rm = TRUE),
            booster = max(booster, na.rm = TRUE))

wave_summary <- wave_summary %>%
  left_join(vax_by_wave, by = "wave")

# Hospitalization per 1,000 cases plot
ggplot(wave_summary, aes(x = wave, y = fully_vax)) +
  geom_col(fill = "lavender") +
  labs(title = "Completed Vaccination Series by Variant Wave",
       x = "Variant Wave", y = "Vaccination series complete") +
  theme_classic() + 
    theme(axis.text.x = element_text(size = 6)) 

```

```{r By Region rates over time with wave colors overlaid}
## Aggregate Data by Region
regional_data <- master_data_msr %>%
  group_by(region_name, mmwr_year, mmwr_week, wave) %>%
  summarise(
    cases = sum(as.numeric(new_cases), na.rm = TRUE),
    deaths = sum(covid_19_deaths, na.rm = TRUE),
    hosp = sum(total_hosp, na.rm = TRUE),
    population = sum(Population, na.rm = TRUE), .groups = "drop"
  ) %>%
  mutate(
    cases_per_100k = (cases/population)*100000,
    cfr = deaths/cases,
    hosp_per_100k = (hosp/population)*100000
  )
# Convert MMWR weeks to actual dates for plotting
regional_data <- regional_data %>%
  mutate(date = MMWRweek::MMWRweek2Date(MMWRyear = mmwr_year, MMWRweek = mmwr_week))

# Define wave periods separately (should match master_data's wave assignments)
wave_dates <- data.frame(
  wave = c("1st Wave: Original", "2nd Wave: Alpha", "3rd Wave: Delta",
           "4th Wave: Omicron BA.1", "5th Wave: Omicron BA.2–BA.5–XBB",
           "6th Wave: XBB"),
  start = as.Date(c("2020-03-01", "2021-01-01", "2021-07-01",
                    "2021-12-01", "2022-04-01", "2023-06-15")),
  end = as.Date(c("2021-02-28", "2021-06-30", "2021-11-30",
                  "2022-03-31", "2023-06-14", "2024-03-31"))
)

# Create the plot
regional_data |>  filter(!is.na(region_name)) |>
ggplot() +
  geom_rect(
    data = wave_dates,  # Use separate wave data
    aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf, fill = wave),
    alpha = 0.2
  ) +
  geom_line(aes(x = date, y = cases_per_100k, color = "Cases per 100k"), linewidth = 0.5) +
  geom_line(aes(x = date, y = hosp_per_100k, color = "Hospitalizations per 100k"), linewidth = 0.5) +
  scale_fill_brewer(palette = "Pastel1", name = "Variant Wave") +
  scale_color_manual(values = c("Cases per 100k" = "blue", "Hospitalizations per 100k" = "red")) +
  facet_wrap(~region_name, scales = "free_y", ncol = 5) +
  labs(
    title = "COVID-19 Trends by US Region with Variant Wave Periods",
    x = "Date",
    y = "Rate per 100,000 Population",
    color = "Metric"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.minor = element_blank()
  ) +
  guides(color = guide_legend(ncol = 1)) +
  guides(fill = guide_legend(ncol = 1))

```

```{r Test for difference in waves}
library(rcompanion)
Test_Hosp <- wave_summary |> mutate(nonHosp = cases-hospitalizations) |> dplyr::select(hospitalizations, nonHosp)
print(Test_Hosp)

Test_Deaths <- wave_summary |> mutate(nonDeaths = cases-deaths) |> dplyr::select(deaths, nonDeaths)
print(Test_Deaths)




wave_summary <- wave_summary %>%
  mutate(
    hosp_rate = hospitalizations / cases * 1000,
    death_rate = deaths / cases * 1000
  )

# Reference wave (1st wave)
ref_hosp <- wave_summary$hospitalizations[1]
ref_cases <- wave_summary$cases[1]
ref_rate <- wave_summary$hosp_rate[1]

# Calculate RR and CIs for each wave compared to the reference
Hosp_Rate_Test <- wave_summary %>%
  mutate(
    RR_vs_ref = hosp_rate / ref_rate,
    log_RR = log(RR_vs_ref),
    SE_log_RR = sqrt( (1/hospitalizations) + (1/ref_hosp) - (1/cases) - (1/ref_cases) ),
    RR_lower_CI = exp(log_RR - 1.96 * SE_log_RR),
    RR_upper_CI = exp(log_RR + 1.96 * SE_log_RR)
  ) %>%
  dplyr::select(wave, hosp_rate, RR_vs_ref, RR_lower_CI, RR_upper_CI)

print(Hosp_Rate_Test)

```

```{r}
library(dplyr)

# Create sequential comparisons
Hosp_Rate_Sequential_Test <- wave_summary %>%
  mutate(
    next_wave = lead(wave),
    next_hosp = lead(hospitalizations),
    next_cases = lead(cases),
    next_rate = lead(hosp_rate)
  ) %>%
  filter(!is.na(next_wave)) %>%  # Remove last row (no next wave)
  mutate(
    RR = next_rate / hosp_rate,
    log_RR = log(RR),
    SE_log_RR = sqrt( (1/next_hosp) + (1/hospitalizations) - (1/next_cases) - (1/cases) ),
    RR_lower_CI = exp(log_RR - 1.96 * SE_log_RR),
    RR_upper_CI = exp(log_RR + 1.96 * SE_log_RR)
  ) %>%
  select(
    Wave_Comparison = wave,
    Next_Wave = next_wave,
    Rate1_per_1000 = hosp_rate,
    Rate2_per_1000 = next_rate,
    Rate_Ratio = RR,
    Lower_CI = RR_lower_CI,
    Upper_CI = RR_upper_CI
  )

print(Hosp_Rate_Sequential_Test)



# Create sequential comparisons
Death_Rate_Sequential_Test <- wave_summary %>%
  mutate(
    next_wave = lead(wave),
    next_death = lead(deaths),
    next_cases = lead(cases),
    next_rate = lead(death_rate)
  ) %>%
  filter(!is.na(next_wave)) %>%  # Remove last row (no next wave)
  mutate(
    RR = next_rate / death_rate,
    log_RR = log(RR),
    SE_log_RR = sqrt( (1/next_death) + (1/deaths) - (1/next_cases) - (1/cases) ),
    RR_lower_CI = exp(log_RR - 1.96 * SE_log_RR),
    RR_upper_CI = exp(log_RR + 1.96 * SE_log_RR)
  ) %>%
  select(
    Wave_Comparison = wave,
    Next_Wave = next_wave,
    Rate1_per_1000 = hosp_rate,
    Rate2_per_1000 = next_rate,
    Rate_Ratio = RR,
    Lower_CI = RR_lower_CI,
    Upper_CI = RR_upper_CI
  )

print(Death_Rate_Sequential_Test)


```
