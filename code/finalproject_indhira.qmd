---
title: "Untitled"
format: html
editor: visual
---

```{r}


library(httr2)
library(dplyr)
library(lubridate)
library (janitor)
library(ggplot2)
library(scales)
library(knitr)
library(tidyverse)


##Retreving Data from cdc Website for covid cases, deaths, hospitalizations and ##vaccines

get_cdc_data <- function(endpoint) {
  api_url <- paste0("https://data.cdc.gov/resource/", endpoint, ".json")
  
  data <- request(api_url) |> 
    req_url_query("$limit" = 10000000) |> 
    req_perform() |> 
    resp_body_json(simplifyVector = TRUE)
  
  return(data)
}
cases_raw <- get_cdc_data("pwn4-m3yp")
hosp_raw <- get_cdc_data("39z2-9zu6")
deaths_raw <- get_cdc_data("r8kw-7aab")
vax_raw <- get_cdc_data("rh2h-3yt2")
head(cases_raw)
head(hosp_raw)
head(deaths_raw)
head(vax_raw)


# Working on the covid deaths data 2020-2025
#View(deaths_raw)
head(deaths_raw)
state_abbreviations <- c(state.abb, "DC", "PR")
state_names <- c(state.name, "District of Columbia", "Puerto Rico")
# Convert and summarize deaths data
deaths_clean <- deaths_raw %>%
  mutate(
    start_date = as_date(start_date),
    mmwr_year = epiyear(start_date),
    mmwr_week = epiweek(start_date),
    covid_19_deaths = as.numeric(covid_19_deaths)
  )%>%
  mutate(state = recode(state, !!!setNames(state.abb, state.name)))%>%
  select(start_date,state, mmwr_year, mmwr_week, covid_19_deaths) %>%
  arrange(state, mmwr_year, mmwr_week)  
print(head(deaths_clean))
unique(deaths_clean$mmwr_year)
#View(deaths_clean)

#  Table 1: Summarize US Covid deaths
us_deaths_weekly <- deaths_clean %>%
  group_by(start_date, mmwr_year, mmwr_week) %>%
  summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = "drop") 

table1 <- us_deaths_weekly %>%
  group_by(mmwr_year) %>% 
  summarize(Covid_deaths= sum(total_deaths)) %>% 
  select(Year = mmwr_year, `Covid Deaths` = Covid_deaths) 
  
kable(table1, caption = "US COVID-19 Deaths (2020-2025)")

# Plot1: Covid deaths in US (2020-2025)
plot1 <- ggplot(us_deaths_weekly, aes(x = start_date, y = total_deaths)) +
  geom_line(color = "darkred", size = 1) +
  scale_x_date(date_labels = "%b/%Y", date_breaks = "3 month") +  # MM/YYYY format
  labs(
    title = "US COVID-19 Deaths 2020-2025 ",
    x = "Month/Year",
    y = "Total Deaths"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
 
ggsave("docs/Covid deaths in US (2020-2025).pdf", plot= plot1, width = 12, height = 8)
ggsave("docs/Covid deaths in US (2020-2025).png", plot = plot1, width = 12, height = 8, dpi = 300)

```

```{r}
library(ggplot2)
library(scales)
library(dplyr)
library(lubridate)

## Divide the pandemic period, January 2020 to April 2025 into waves

variant_waves <- tibble::tibble(
  start = as_date(c("2020-03-01", "2021-01-01", "2021-07-01", "2021-12-01", "2022-04-01", "2023-06-15")),
  end   = as_date(c("2021-02-28", "2021-06-30", "2021-11-30", "2022-03-31", "2023-06-14", "2024-03-31")),
  variant = c("1st Wave: Original", 
              "2nd Wave: Alpha", 
              "3rd Wave: Delta", 
              "4th Wave: Omicron BA.1", 
              "5th Wave: Omicron BA.2 → BA.5 → XBB",
              "6th Wave: XBB")
)

# Plot2: Covid deaths with variant overlay by state
plot2 <- ggplot(us_deaths_weekly, aes(x = start_date, y = total_deaths)) +
  geom_rect(
    data = variant_waves,
    aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf, fill = variant),
    inherit.aes = FALSE,
    alpha = 0.2
  ) +
  geom_line(color = "darkred", size = 1) +
  scale_x_date(date_labels = "%b/%Y", date_breaks = "3 months") +
  labs(
    title = "US Weekly COVID-19 Deaths with Variant Waves (2020–2025)",
    x = "Month/Year",
    y = "Total Deaths",
    fill = "Variant Waves"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("docs/Covid deaths with variant overlay by state.pdf", plot= plot2, width = 12, height = 8)
ggsave("docs/Covid deaths with variant overlay by state.png", plot = plot2, width = 12, height = 8, dpi = 300)
```

Compare COVID-19 death trends by state over time using small multiples (facets).

```{r}

#plot3: Covid-19 deaths by State
plot3 <-deaths_clean %>%
  group_by(state, start_date) %>%
  summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = start_date, y = total_deaths)) +
  geom_line(color = "darkred") +
  facet_wrap(~ state, scales = "free_y") +
  labs(
    title = "COVID-19 Deaths by State",
    x = "Date",
    y = "Deaths"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("docs/COVID-19 Deaths by State.pdf", plot= plot3, width = 12, height = 8)
ggsave("docs/COVID-19 Deaths by State.png", plot = plot3, width = 12, height = 8, dpi = 300)

```

A heatmap showing intensity of deaths by week and state.

```{r}
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(viridis)

##A heatmap showing intensity of deaths by week and state.

deaths_filtered <- deaths_clean %>%
  filter(!state %in% c("United States", "New York City"))
deaths_quarterly <- deaths_filtered %>%
  mutate(quarter = paste0(year(start_date), " Q", quarter(start_date))) %>%
  group_by(state, quarter) %>%
  summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = "drop")
deaths_quarterly$quarter <- factor(deaths_quarterly$quarter, levels = unique(deaths_quarterly$quarter))

#plot4: Heatmap showing intensity of deaths by state
plot4 <- ggplot(deaths_quarterly, aes(x = quarter, y = state, fill = total_deaths)) +
  geom_tile(color = "white") +
  scale_fill_viridis(option = "magma", name = "Deaths", direction = -1) +
  labs(
    title = "COVID-19 Deaths by State (Quarterly)",
    x = "Quarter",
    y = "State"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
    axis.text.y = element_text(size = 6)
  )
  
ggsave("docs/COVID-19 Deaths by State (Quarterly).pdf", plot= plot4, width = 12, height = 8)
ggsave("docs/COVID-19 Deaths by State (Quarterly).png", plot = plot4, width = 12, height = 8, dpi = 300)

```

```{r}

## Reteriving the population of US states form Census website

library(jsonlite)
library(purrr)
library(tidyverse)
census_key <- "a498a5717131540bcea2c82b3e8fd47a367cef98"
url <- "https://api.census.gov/data/2021/pep/population"
request <- request(paste0(url,
    paste0("?get=POP_2020,POP_2021,NAME&for=state:*&key=",
           census_key)))
print(request)
response <- request |> req_perform() 
response

content_type <- resp_content_type(response)
cat("The content type of the response is:", content_type, "\n")
population <- response |>resp_body_string()|>jsonlite::fromJSON()
head(population)

population <- population %>%
  row_to_names(row_number = 1)%>%
  as_tibble()
head(population)

cleaned_population <- population %>%
  select(-state) %>%
  rename(state_name = NAME)%>%
  pivot_longer(cols = starts_with("POP_"),  
               names_to = "Year",
               values_to = "Population") %>%
  mutate(Year = gsub("POP_", "", Year),  
         Year = as.integer(Year), 
         Population = as.numeric(Population))  

state_abbreviations <- c(state.abb, "DC", "PR")
state_names <- c(state.name, "District of Columbia", "Puerto Rico")

cleaned_population <- cleaned_population %>%
  mutate(
    state = case_when(
      state_name %in% state_names ~ state_abbreviations[match(state_name, state_names)]
    )
  )


url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
# regions <- use fromJSON to read as a data.frame
regions_data <- fromJSON(url)
#str(regions_data)
#head(regions_data)
#View(regions_data)
unique(regions_data$region_name)
# Convert the JSON data to a data frame and process it
regions <- regions_data %>%
  # Unnest the states from the nested list
  unnest(cols = states) %>%
  # Rename the columns
  rename(state_name = states) %>%
  # Rename the region with a long name to something shorter
  mutate(region_name = ifelse(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", "NYNJPV", region_name)) %>%
  # Ensure the region_name column is a factor
  mutate(region_name = factor(region_name))

# Print the first few rows of the regions data frame
head(regions)
#view(regions)
#class(regions$region_name)
cleaned_population <- cleaned_population %>%
  left_join(regions, by = "state_name")

all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2021, 12, 31), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 
colnames(cleaned_population)
dates_and_pop <- cross_join(all_dates, data.frame(state = unique(cleaned_population$state))) |> left_join(cleaned_population, by = c("state", "mmwr_year" = "Year"))
head(dates_and_pop)
datdeaths <- dates_and_pop %>%
  left_join(deaths_clean, by = c("state", "mmwr_year", "mmwr_week"))  %>%
  arrange(state, date)
head(datdeaths)

```

```{r}

##  For each period, compute the death rates by state. Describe which states did 
## better or worse during the different periods.


#  Merge variant period info to deaths+population dataset
datdeaths_waves <- datdeaths %>%
  mutate(wave = case_when(
    start_date >= as_date("2020-03-01") & start_date <= as_date("2021-02-28") ~ "1st Wave: Original",
    start_date >= as_date("2021-01-01") & start_date <= as_date("2021-06-30") ~ "2nd Wave: Alpha",
    start_date >= as_date("2021-07-01") & start_date <= as_date("2021-11-30") ~ "3rd Wave: Delta",
    start_date >= as_date("2021-12-01") & start_date <= as_date("2022-03-31") ~ "4th Wave: Omicron BA.1",
    start_date >= as_date("2022-04-01") & start_date <= as_date("2023-06-14") ~ "5th Wave: Omicron BA.2–BA.5–XBB",
    start_date >= as_date("2023-06-15") & start_date <= as_date("2024-03-31") ~ "6th Wave: XBB",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(wave))


# Aggregate deaths and compute death rate per wave & state
death_rates_by_wave <- datdeaths_waves %>%
  group_by(state, wave) %>%
  summarise(
    total_deaths = sum(covid_19_deaths, na.rm = TRUE),
    population = max(Population, na.rm = TRUE),  # Use latest available for that year
    .groups = "drop"
  ) %>%
  mutate(death_rate = total_deaths / population * 100000)  # per 100,000 population


# Table 2: top states by death rate per wave
topstate_by_wave <- death_rates_by_wave %>%
  group_by(wave) %>%
  slice_max(death_rate, n = 1) %>%
  arrange(desc(death_rate)) %>% 
  ungroup() 
summary_table1 <- topstate_by_wave %>%
  select(State = state, Wave = wave,Population= population, `Death Rate` = death_rate) %>%
  arrange(Wave, desc(`Death Rate`))  
summary_table1 <- topstate_by_wave %>%
  select(State = state, Wave = wave, `Death Rate` = death_rate) %>%
  mutate(`Death Rate` = round(`Death Rate`, 1)) %>%
  arrange(Wave, desc(`Death Rate`))
kable(summary_table1, caption = "Top States by COVID-19 Death Rate  per 100,000 population")

# Table3 : top 5 states by death rate per wave

top5_by_wave <- death_rates_by_wave %>%
  group_by(wave) %>%
  slice_max(death_rate, n = 5) %>%
  arrange(desc(death_rate)) %>% 
  ungroup() 
# Prepare your summary table BEFORE using kable
summary_table <- top5_by_wave %>%
  select(State = state, Wave = wave, `Death Rate` = death_rate) %>%
  arrange(Wave, desc(`Death Rate`))  # optional for nicer ordering
kable(summary_table, caption = "Top 5 States by COVID-19 Death Rate per Variant Wave")
summary_table <- top5_by_wave %>%
  select(State = state, Wave = wave, `Death Rate` = death_rate) %>%
  mutate(`Death Rate` = round(`Death Rate`, 1)) %>%
  arrange(Wave, desc(`Death Rate`))

# Plot5: Top 5 States by COVID-19 Death Rate for Each Variant Wave -facet by wave
plot5 <- ggplot(top5_by_wave, aes(x = fct_reorder(state, death_rate), y = death_rate, fill = wave)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  facet_wrap(~ wave, scales = "free_y") +
  labs(
    title = "Top 5 States by COVID-19 Death Rate for Each Variant Wave",
    x = "State",
    y = "Death Rate (per 100,000 people)"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(angle = 0, hjust = 1)
  )
ggsave("docs/Top 5 States by COVID-19 Death Rate for Each Variant Wave.pdf", plot= plot5, width = 12, height = 8)
ggsave("docs/Top 5 States by COVID-19 Death Rate for Each Variant Wave.png", plot = plot5, width = 12, height = 8, dpi = 300)

   
```

```{r}

#Plot 6: Heatmap of State-wise COVID-19 Death Rates per Wave

ggplot(death_rates_by_wave, aes(x = wave, y = reorder(state, desc(death_rate)), fill = death_rate)) +
  geom_tile(color = "white") +
  scale_fill_viridis_c(name = "Death Rate\n(per 100k)", option = "plasma") +
  labs(
    title = "Heatmap of COVID-19 Death Rates by State and Wave",
    x = "Wave",
    y = "State"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(face = "bold")
  )


```

```{r}
# Plot7:Time series plot -top 10 states overall by total deaths Mar 2020 -Dec 2021
top10_states <- datdeaths %>%
  group_by(state) %>%
  summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE)) %>%
  arrange(desc(total_deaths)) %>%
  slice_head(n = 10) %>%
  pull(state)

top10_data <- datdeaths %>%
  filter(state %in% top10_states)

plot7 <- ggplot(top10_data, aes(x = start_date, y = covid_19_deaths, color = state)) +
  geom_line(size = 1) +
  labs(
    title = "COVID-19 Deaths Over Time – Top 10 States",
    x = "Date",
    y = "Deaths",
    color = "State"
  ) +
  theme_minimal(base_size = 13) +
  scale_x_date(date_breaks = "3 months", date_labels = "%b\n%Y") +
  theme(legend.position = "bottom")
ggsave("docs/COVID-19 Deaths Over Time – Top 10 States.pdf", plot= plot7, width = 12, height = 8)
ggsave("docs/COVID-19 Deaths Over Time – Top 10 States.png", plot = plot7, width = 12, height = 8, dpi = 300)
```

```{r}

# Plot7: Facet plot Covid deaths for top 10 states  
facet_plot<- ggplot(top10_data, aes(x = start_date, y = covid_19_deaths)) +
  geom_line(color = "steelblue", size = 1) +
  geom_smooth(se = FALSE, color = "darkred", method = "loess", span = 0.3) +
  facet_wrap(~ state, scales = "free_y", nrow=3) +
  labs(
    title = "COVID-19 Deaths Over Time – Faceted by Top 10 States",
    x = "Date",
    y = "Deaths"
  ) +
  scale_x_date(date_breaks = "3 months", date_labels = "%b\n%Y") +
  theme_minimal(base_size = 13) +
  theme(
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
ggsave("docs/facet_top10_states.png", plot = facet_plot, width = 12, height = 8, dpi = 300)
ggsave("docs/facet_top10_states.pdf", plot = facet_plot, width = 12, height = 8)
facet_plot

#Plot8: Time series plot -top 10 states overall by total deaths 
start_date <- as.Date("2020-01-01")
end_date <- as.Date("2021-12-31")
 
time_series_plot <- ggplot(top10_data, aes(x = start_date, y = covid_19_deaths, color = state)) +
  geom_line(size = 1, alpha = 0.8) +
  labs(
    title = "COVID-19 Weekly Deaths Over Time – Top 10 States",
    x = "Date",
    y = "Deaths",
    color = "State"
  ) +
  scale_x_date(
    limits = c(start_date, end_date),
    date_breaks = "3 months",
    date_labels = "%b\n%Y"
  ) +
  theme_minimal(base_size = 13) +
  theme(legend.position = "bottom")
time_series_plot


```

```{r}

## states consistently had lower death rates

#plot9: Top 10 States with Lowest Average COVID-19 Death Rates
# Average death rate across waves per state
average_death_rates <- death_rates_by_wave %>%
  group_by(state) %>%
  summarise(
    avg_death_rate = mean(death_rate, na.rm = TRUE),
    sd_death_rate = sd(death_rate, na.rm = TRUE),
    n_waves = n()
  ) %>%
  arrange(avg_death_rate)

# View states with consistently low death rates
head(average_death_rates, 5)
#This will give you the top 10 states with the lowest average death rates across #all COVID variant waves.
plot9 <- ggplot(average_death_rates %>% slice_min(avg_death_rate, n = 5),
       aes(x = reorder(state, avg_death_rate), y = avg_death_rate)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Top 5 States with Lowest Average COVID-19 Death Rates",
    x = "State",
    y = "Average Death Rate (per 100,000)"
  ) +
  theme_minimal(base_size = 13)
ggsave("docs/Top 5 States with Lowest Average COVID-19 Death Rates.pdf", plot= plot9, width = 12, height = 8)
ggsave("docs/Top 5 States with Lowest Average COVID-19 Death Rates.png", plot = plot9, width = 12, height = 8, dpi = 300)
```

```{r}
# Did some states improve or worsen over time?
#trend analysis using simple regression for each state:
library(broom)

death_rates_by_wave <- death_rates_by_wave %>%
  mutate(wave_order = as.numeric(factor(wave, levels = unique(wave))))

# Run a linear trend for each state
state_trends <- death_rates_by_wave %>%
  group_by(state) %>%
  do(tidy(lm(death_rate ~ wave_order, data = .))) %>%
  filter(term == "wave_order") %>%
  arrange(estimate)

#Table 4: states with largest decrease or increase in death rates
head(state_trends, 5)  # most improved
tail(state_trends, 5)  # most worsened

#plot 10: Trend analysis Death Rates by State Across Variant Waves
plot10 <- ggplot(death_rates_by_wave, aes(x = wave, y = death_rate, group = state, color = state)) +
  geom_line(show.legend = FALSE, alpha = 0.6) +
  labs(
    title = "Trend of Death Rates by State Across Variant Waves",
    x = "Wave",
    y = "Death Rate (per 100,000)"
  ) +
  theme_minimal(base_size = 13) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("docs/Trend of Death Rates by State Across Variant Waves.pdf", plot= plot10, width = 12, height = 8)
ggsave("docs/Trend of Death Rates by State Across Variant Waves.png", plot = plot10, width = 12, height = 8, dpi = 300)

```

```{r}
## Cases Raw
library(dplyr)
library(lubridate)
#head(cases_raw)
# Wrangle cases data to keep only required columns
cases_clean <- cases_raw %>%
  mutate(
    # Convert start_date to Date format
    start_date = as_date(start_date),
    
    # Extract MMWR year and week using lubridate functions
    mmwr_year = epiyear(start_date),
    mmwr_week = epiweek(start_date)
  ) %>%
  select(state, mmwr_year, mmwr_week, new_cases) %>%
  arrange(state, mmwr_year, mmwr_week)  # Arrange data for readability

# Display the cleaned data
head(cases_clean)
unique(cases_clean$mmwr_year)



```

```{r}

## Hosp data
library(dplyr)
library(lubridate)
#colnames(hosp_raw)
#head(hosp_raw)
# Convert and summarize hospitalizations
hosp_clean = hosp_raw |> select(jurisdiction, collection_date, hosp = new_covid_19_hospital)|>
  mutate(mmwr_week = epiweek(collection_date), mmwr_year = epiyear(collection_date))|>
  mutate(hosp=as.integer(hosp)) |>
  select(-collection_date)|>
  rename(state = jurisdiction)|>
  group_by(state, mmwr_week, mmwr_year)|>
  summarise(total_hosp = sum(hosp)) |>
  ungroup()

head(hosp_clean)
unique(hosp_clean$mmwr_year)
```

```{r}

### Vaccine Data
library(dplyr)
library(lubridate)
#View(vax_raw)
# Convert and summarize vaccine data
vax_clean <- vax_raw %>%
  filter(date_type == "Admin") %>%  # Only keep administered data
  mutate(
    # Convert date column to Date format
    date = as_date(date),

    # Extract MMWR year and week
    mmwr_year = epiyear(date),
    mmwr_week = epiweek(date),

    # Ensure cumulative vaccination columns are numeric
    series_complete = as.numeric(series_complete_cumulative),
    booster = as.numeric(booster_cumulative)
  ) %>%
  rename(datevax=date)%>%
  group_by(datevax,location, mmwr_year, mmwr_week) %>%
  summarise(
    series_complete = max(series_complete, na.rm = TRUE),  # Keep max cumulative value
    booster = max(booster, na.rm = TRUE)  # Keep max cumulative value
  ) %>%
  ungroup() %>%
  rename(state = location) %>%  # Rename location to state for consistency
  select(datevax,state, mmwr_year, mmwr_week, series_complete, booster) %>%
  arrange(state, mmwr_year, mmwr_week)  # Arrange data for readability

# Display cleaned vaccination data
print(vax_clean)
any(vax_clean$datevax == as.Date("2021-07-01"))
#View(vax_clean)
unique(vax_clean$mmwr_year)
```
